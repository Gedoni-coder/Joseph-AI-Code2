import React, { useState } from "react";
import React, { useState } from "react";
import { Link } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import ModuleHeader from "@/components/ui/module-header";
import {
  Bell,
  Inbox,
  Star,
  Archive,
  Trash2,
  Search,
  Filter,
  RefreshCw,
  MoreVertical,
  CheckSquare,
  Square,
  ArrowLeft,
  Activity,
  Clock,
  AlertTriangle,
  TrendingUp,
  CheckCircle,
  User,
  Calendar,
} from "lucide-react";

const Notifications = () => {
  const [selectedCategory, setSelectedCategory] = useState("inbox");
  const [selectedNotification, setSelectedNotification] = useState(null);
  const [selectedMessages, setSelectedMessages] = useState([]);

  const notifications = [
    {
      id: 1,
      sender: "Joseph AI System",
      subject: "Revenue Forecast Update - Q3 projections show 15% growth",
      preview: "Your Q3 revenue projections have been updated based on recent market data analysis. The forecast shows a promising 15% growth above target...",
      body: `Dear User,

Your Q3 revenue projections have been updated based on recent market data analysis. The forecast shows a promising 15% growth above target.

Key highlights:
• Revenue growth: 15% above Q2 targets
• Market expansion opportunities identified in 3 new segments
• Customer acquisition rate increased by 23%
• Recommended actions: Focus on customer retention programs

This update affects your:
- Business forecast dashboard
- Financial planning modules
- Growth strategy recommendations

Next steps:
1. Review the detailed forecast in your Business Forecast dashboard
2. Consider adjusting your Q4 targets based on this positive trend
3. Schedule a strategy review meeting with your team

Best regards,
Joseph AI`,
      timestamp: "30 minutes ago",
      type: "forecast",
      priority: "high",
      read: false,
      starred: false,
      archived: false,
      category: "Business Intelligence",
    },
    {
      id: 2,
      sender: "Risk Management System",
      subject: "Supply Chain Risk Alert - Immediate attention required",
      preview: "A potential supply chain disruption has been detected in your key supplier network. Risk level: High. Recommended immediate review...",
      body: `RISK ALERT - IMMEDIATE ATTENTION REQUIRED

A potential supply chain disruption has been detected in your key supplier network.

Risk Details:
• Risk Level: High
• Affected Suppliers: 3 primary vendors
• Potential Impact: 2-3 week delay in production
• Financial Impact: Estimated $2.5M

Immediate Actions Required:
1. Contact backup suppliers immediately
2. Review current inventory levels
3. Assess customer impact and communication needs
4. Activate contingency plans

This alert was generated based on:
- Real-time supplier monitoring
- Market disruption indicators
- Historical risk patterns

Please access the Risk Management dashboard for detailed analysis and recommended mitigation strategies.

Time is critical - please respond within 4 hours.

Joseph AI Risk Management`,
      timestamp: "2 hours ago",
      type: "alert",
      priority: "urgent",
      read: false,
      starred: true,
      archived: false,
      category: "Risk Management",
    },
    {
      id: 3,
      sender: "Compliance Monitor",
      subject: "Monthly Compliance Report - All systems compliant",
      preview: "Your monthly compliance audit has been completed. Status: Fully Compliant. All regulatory requirements met for this period...",
      body: `Monthly Compliance Report - January 2024

Compliance Status: ✅ FULLY COMPLIANT

Summary:
• All 47 regulatory requirements: PASSED
• Financial compliance score: 98.5%
• Data protection compliance: 100%
• Industry standards adherence: 97.2%

Areas of Excellence:
- Financial reporting accuracy
- Data security protocols
- Employee training completion
- Documentation standards

Minor Recommendations:
1. Update policy documentation (due Q2)
2. Schedule annual security audit
3. Review vendor compliance certificates

Detailed report available in Compliance Dashboard.

This automated report was generated by Joseph AI Compliance Monitor.`,
      timestamp: "4 hours ago",
      type: "info",
      priority: "normal",
      read: true,
      starred: false,
      archived: false,
      category: "Compliance",
    },
    {
      id: 4,
      sender: "Market Intelligence",
      subject: "New competitor analysis available - Market position update",
      preview: "A new competitor analysis has been completed. Your market position remains strong with opportunities for expansion identified...",
      body: `Market Intelligence Update

New competitor analysis completed for your industry sector.

Key Findings:
• Your market position: #3 in target segment
• Market share: 12.5% (↑2.1% from last quarter)
• Competitive threats: 2 new entrants identified
• Opportunities: 3 underserved market segments

Competitor Insights:
1. Competitor A: Focusing on premium segment
2. Competitor B: Aggressive pricing strategy
3. New Entrant C: Technology-focused approach

Strategic Recommendations:
- Maintain current market position
- Consider pricing strategy review
- Explore technology partnerships
- Monitor new entrant activities

Full analysis available in Market Intelligence dashboard.

Joseph AI Market Analyst`,
      timestamp: "6 hours ago",
      type: "market",
      priority: "normal",
      read: true,
      starred: false,
      archived: false,
      category: "Market Intelligence",
    },
    {
      id: 5,
      sender: "System Administrator",
      subject: "System maintenance completed - All services restored",
      preview: "Scheduled system maintenance has been completed successfully. All services are now fully operational with improved performance...",
      body: `System Maintenance Report

Scheduled maintenance completed successfully at 02:00 AM EST.

Maintenance Activities:
• Database optimization: ✅ Complete
• Security updates: ✅ Applied
• Performance enhancements: ✅ Installed
• Backup verification: ✅ Successful

Improvements:
- 25% faster dashboard loading
- Enhanced security protocols
- Improved data synchronization
- Better mobile responsiveness

Downtime: 47 minutes (within planned window)
Next maintenance: March 15, 2024

All systems are fully operational. Thank you for your patience.

Joseph AI System Administrator`,
      timestamp: "1 day ago",
      type: "system",
      priority: "low",
      read: true,
      starred: false,
      archived: false,
      category: "System",
    },
  ];

  const categories = [
    { id: "inbox", label: "Inbox", icon: <Inbox className="h-4 w-4" />, count: notifications.filter(n => !n.archived).length },
    { id: "starred", label: "Starred", icon: <Star className="h-4 w-4" />, count: notifications.filter(n => n.starred).length },
    { id: "archived", label: "Archived", icon: <Archive className="h-4 w-4" />, count: notifications.filter(n => n.archived).length },
    { id: "alerts", label: "Alerts", icon: <AlertTriangle className="h-4 w-4" />, count: notifications.filter(n => n.type === "alert").length },
  ];

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "forecast":
        return <TrendingUp className="h-4 w-4 text-green-600" />;
      case "alert":
        return <AlertTriangle className="h-4 w-4 text-red-600" />;
      case "info":
        return <CheckCircle className="h-4 w-4 text-blue-600" />;
      case "market":
        return <Activity className="h-4 w-4 text-purple-600" />;
      case "system":
        return <Bell className="h-4 w-4 text-gray-600" />;
      default:
        return <Bell className="h-4 w-4 text-gray-600" />;
    }
  };

  const getPriorityBadge = (priority: string) => {
    switch (priority) {
      case "urgent":
        return <Badge className="bg-red-100 text-red-800">Urgent</Badge>;
      case "high":
        return <Badge className="bg-orange-100 text-orange-800">High</Badge>;
      case "normal":
        return <Badge className="bg-blue-100 text-blue-800">Normal</Badge>;
      case "low":
        return <Badge className="bg-gray-100 text-gray-800">Low</Badge>;
      default:
        return null;
    }
  };

  const filteredNotifications = notifications.filter(notification => {
    switch (selectedCategory) {
      case "starred":
        return notification.starred;
      case "archived":
        return notification.archived;
      case "alerts":
        return notification.type === "alert";
      default:
        return !notification.archived;
    }
  });

  const toggleMessageSelection = (messageId: number) => {
    setSelectedMessages(prev => 
      prev.includes(messageId) 
        ? prev.filter(id => id !== messageId)
        : [...prev, messageId]
    );
  };

  const selectAllMessages = () => {
    if (selectedMessages.length === filteredNotifications.length) {
      setSelectedMessages([]);
    } else {
      setSelectedMessages(filteredNotifications.map(n => n.id));
    }
  };

  if (selectedNotification) {
    const notification = notifications.find(n => n.id === selectedNotification);
    
    return (
      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <header className="border-b bg-white sticky top-0 z-50">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center gap-4">
              <Button 
                variant="ghost" 
                size="sm"
                onClick={() => setSelectedNotification(null)}
              >
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Inbox
              </Button>
              <div className="flex-1">
                <h1 className="text-xl font-semibold">{notification?.subject}</h1>
              </div>
              <div className="flex items-center gap-2">
                <Button variant="ghost" size="sm">
                  <Star className="h-4 w-4" />
                </Button>
                <Button variant="ghost" size="sm">
                  <Archive className="h-4 w-4" />
                </Button>
                <Button variant="ghost" size="sm">
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>
        </header>

        {/* Message Content */}
        <div className="container mx-auto px-4 py-8">
          <Card className="max-w-4xl mx-auto">
            <CardHeader>
              <div className="flex items-start justify-between gap-4">
                <div className="flex items-start gap-4">
                  <div className="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center">
                    <User className="h-5 w-5 text-blue-600" />
                  </div>
                  <div>
                    <div className="flex items-center gap-2">
                      <h3 className="font-semibold">{notification?.sender}</h3>
                      {getPriorityBadge(notification?.priority)}
                    </div>
                    <div className="text-sm text-muted-foreground flex items-center gap-2">
                      <span>to me</span>
                      <span>•</span>
                      <Calendar className="h-3 w-3" />
                      <span>{notification?.timestamp}</span>
                    </div>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  {getTypeIcon(notification?.type)}
                  <Badge variant="outline">{notification?.category}</Badge>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="prose max-w-none">
                <pre className="whitespace-pre-wrap text-sm leading-relaxed font-sans">
                  {notification?.body}
                </pre>
              </div>
              
              {/* Action Buttons */}
              <div className="flex gap-2 mt-6 pt-6 border-t">
                <Button size="sm">
                  Reply
                </Button>
                <Button size="sm" variant="outline">
                  Forward
                </Button>
                <Button size="sm" variant="outline">
                  Mark as Important
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <ModuleHeader
        icon={<Bell className="h-6 w-6" />}
        title="Joseph AI Notifications"
        description="Stay updated with system alerts, AI insights, and business updates"
        isConnected={true}
        lastUpdated={new Date()}
        connectionLabel="Live"
      />

      <div className="container mx-auto px-4 py-6">
        <div className="flex gap-6">
          {/* Sidebar */}
          <div className="w-64 space-y-2">
            <div className="bg-white rounded-lg border p-4">
              <Button className="w-full mb-4">
                <Bell className="h-4 w-4 mr-2" />
                New Notification
              </Button>
              
              <nav className="space-y-1">
                {categories.map((category) => (
                  <button
                    key={category.id}
                    onClick={() => setSelectedCategory(category.id)}
                    className={`w-full flex items-center justify-between px-3 py-2 text-sm rounded-md transition-colors ${
                      selectedCategory === category.id
                        ? "bg-blue-100 text-blue-700"
                        : "hover:bg-gray-100"
                    }`}
                  >
                    <div className="flex items-center gap-3">
                      {category.icon}
                      <span>{category.label}</span>
                    </div>
                    {category.count > 0 && (
                      <Badge variant="secondary" className="text-xs">
                        {category.count}
                      </Badge>
                    )}
                  </button>
                ))}
              </nav>
            </div>
          </div>

          {/* Main Content */}
          <div className="flex-1">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <button
                      onClick={selectAllMessages}
                      className="p-1 hover:bg-gray-100 rounded"
                    >
                      {selectedMessages.length === filteredNotifications.length && filteredNotifications.length > 0 ? (
                        <CheckSquare className="h-4 w-4" />
                      ) : (
                        <Square className="h-4 w-4" />
                      )}
                    </button>
                    <CardTitle className="capitalize">{selectedCategory}</CardTitle>
                  </div>
                  
                  {selectedMessages.length > 0 && (
                    <div className="flex items-center gap-2">
                      <Button variant="outline" size="sm">
                        <Archive className="h-4 w-4 mr-2" />
                        Archive ({selectedMessages.length})
                      </Button>
                      <Button variant="outline" size="sm">
                        <Trash2 className="h-4 w-4 mr-2" />
                        Delete ({selectedMessages.length})
                      </Button>
                    </div>
                  )}
                </div>
              </CardHeader>
              
              <CardContent className="p-0">
                <div className="divide-y">
                  {filteredNotifications.map((notification) => (
                    <div
                      key={notification.id}
                      className={`flex items-center gap-4 p-4 hover:bg-gray-50 cursor-pointer transition-colors ${
                        !notification.read ? "bg-blue-50 border-l-4 border-l-blue-500" : ""
                      }`}
                      onClick={() => setSelectedNotification(notification.id)}
                    >
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          toggleMessageSelection(notification.id);
                        }}
                        className="p-1 hover:bg-gray-200 rounded"
                      >
                        {selectedMessages.includes(notification.id) ? (
                          <CheckSquare className="h-4 w-4" />
                        ) : (
                          <Square className="h-4 w-4" />
                        )}
                      </button>
                      
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          // Toggle starred
                        }}
                        className="p-1 hover:bg-gray-200 rounded"
                      >
                        <Star className={`h-4 w-4 ${notification.starred ? "fill-yellow-400 text-yellow-400" : ""}`} />
                      </button>
                      
                      <div className="flex-shrink-0">
                        {getTypeIcon(notification.type)}
                      </div>
                      
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-2 mb-1">
                          <span className={`text-sm ${!notification.read ? "font-semibold" : "font-medium"}`}>
                            {notification.sender}
                          </span>
                          {getPriorityBadge(notification.priority)}
                          <Badge variant="outline" className="text-xs">
                            {notification.category}
                          </Badge>
                        </div>
                        <div className={`text-sm ${!notification.read ? "font-medium" : ""} truncate`}>
                          {notification.subject}
                        </div>
                        <div className="text-xs text-muted-foreground truncate">
                          {notification.preview}
                        </div>
                      </div>
                      
                      <div className="flex-shrink-0 text-right">
                        <div className="text-xs text-muted-foreground">
                          {notification.timestamp}
                        </div>
                        <Button variant="ghost" size="sm" className="mt-1">
                          <MoreVertical className="h-3 w-3" />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
                
                {filteredNotifications.length === 0 && (
                  <div className="text-center py-12">
                    <Inbox className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                    <h3 className="text-lg font-semibold mb-2">No notifications</h3>
                    <p className="text-muted-foreground">
                      Your {selectedCategory} is empty. New notifications will appear here.
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Notifications;
